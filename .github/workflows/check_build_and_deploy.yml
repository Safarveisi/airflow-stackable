name: Lint, Static Check, Build, S3 Upload & DAG Reconfig

on:
    push:
        branches:
            - master
    pull_request:
        types: [opened, synchronize]

env:
    DOCKER_PULL_SECRET_NAME: docker

jobs:

    lint-format-plus-static-code-check:
        runs-on: ubuntu-latest
        outputs:
          required_python_version: ${{ steps.minimum-python-version.outputs.required_python_version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Get required Python version
              id: minimum-python-version
              run: |
                required_python_version=$(./run.sh get_required_python_version)
                echo "required_python_version=$required_python_version" >> $GITHUB_OUTPUT
                echo "Required Python version: $required_python_version"

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '${{ steps.minimum-python-version.outputs.required_python_version }}'

            - name: Cache pip packages
              id: cache-pip
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install pre-commit
              run: pip install pre-commit

            - name: Linting with pre-commit
              run: |
                pre-commit run --all-files

    version-check:
      runs-on: ubuntu-latest
      outputs:
        project_version: ${{ steps.get-project-version.outputs.project_version }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Extract package version from pyproject.toml
          id: get-project-version
          run: |
            project_version=$(./run.sh get_project_version)
            echo "project_version=$project_version" >> $GITHUB_OUTPUT
            echo "Project version: $project_version"

        - name: Check for existing tag
          run: |
            # This will fail in case the tag already exists
            git tag ${{ steps.get-project-version.outputs.project_version }}

    build-docker-image-plus-push-to-registry:
      runs-on: ubuntu-latest
      needs:
        - version-check
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build and push
          id: docker-image-build-and-push
          continue-on-error: true
          run: |
            stdout=$(docker buildx build --platform linux/amd64 \
              --tag  ${{ secrets.DOCKERHUB_USERNAME }}/spark_app:${{ needs.version-check.outputs.project_version }} \
              --push . 2>&1)
            echo "$stdout"
            # Save full stdout
            echo "stdout<<EOF" >> $GITHUB_OUTPUT
            echo "$stdout" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

        - uses: actions/github-script@v7
          if: github.event_name == 'pull_request'
          env:
            BUILD: "docker\n${{ steps.docker-image-build-and-push.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GIT_FG_TOKEN }}
            script: |
              const output = `#### Docker build and push ⚙️ \`${{ steps.docker-image-build-and-push.outcome }}\`

              <details>
              <summary>Show build and push</summary>

              \`\`\`
              ${process.env.BUILD}
              \`\`\`

              </details>

              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
              })

        - name: Docker build and push status
          if: steps.docker-image-build-and-push.outcome == 'failure'
          run: exit 1

    upload-python-file-into-s3:
        runs-on: ubuntu-latest
        needs:
          - lint-format-plus-static-code-check
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '${{ needs.lint-format-plus-static-code-check.outputs.required_python_version }}'

            - name: Cache pip packages
              id: cache-pip
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install s3cmd
              run: pip install s3cmd

            - name: Upload s3_script.py into the S3 bucket
              run: |
                s3cmd --access_key=${{ secrets.AWS_ACCESS_KEY_ID }} \
                      --secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                      --host-bucket="%(bucket)s.${{ secrets.S3_HOST }}" \
                      --region=${{ secrets.S3_BUCKET_REGION }} \
                      put s3_script.py s3://${{ secrets.S3_BUCKET }}/stackable-demo/s3_script.py

    reconfigure-airflow-dags-on-k8s:
      runs-on: ubuntu-latest
      needs:
        - version-check
        - build-docker-image-plus-push-to-registry
        - upload-python-file-into-s3
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Set up Kubectl
          run: |
            latest_kubectl_version=$(./run.sh get_latest_kubectl_release)
            curl -LO https://dl.k8s.io/release/$latest_kubectl_version/bin/linux/amd64/kubectl
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            # Test if the installation was successful
            kubectl version --client

        - name: Create Kubeconfig
          run: |
            if [ ! -d "$HOME/.kube" ]; then
              mkdir $HOME/.kube
            fi
            echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

        - name: Check if the docker K8s secret exists in the cluster
          id: check-for-docker-secret
          continue-on-error: true
          run: |
            kubectl get secret ${{ env.DOCKER_PULL_SECRET_NAME }}

        - name: Create docker secret on K8s
          if: steps.check-for-docker-secret.outcome == 'failure'
          run: |
            kubectl create secret docker-registry ${{ env.DOCKER_PULL_SECRET_NAME }} \
             --docker-server=https://index.docker.io/v1/ \
             --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
             --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
             --docker-email=${{ secrets.DOCKERHUB_EMAIL }}

        - name: Reconfigure the airflow DAGs on k8s
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            S3_BUCKET: ${{ secrets.S3_BUCKET }}
            S3_HOST: ${{ secrets.S3_HOST}}
            S3_BUCKET_REGION: ${{ secrets.S3_BUCKET_REGION }}
          run: |
            ./run.sh create:airflow_dags

        - name: Push the tag
          uses: actions/github-script@v7
          with:
            github-token: ${{ secrets.GIT_FG_TOKEN }}
            script: |
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ needs.version-check.outputs.project_version }}',
                sha: context.sha
              })
