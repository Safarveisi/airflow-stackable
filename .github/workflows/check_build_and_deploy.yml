name: Lint, Static Check, Build, S3 Upload & DAG Reconfig

on:
    push:
        branches:
            - "master"
        tags:
          - "v[0-9]*.[0-9]*.[0-9]*"
        paths:
          - "s3_script.py"
          - "Dockerfile"
          - "manifests/dags_configmap.yml"

env:
    DOCKER_PULL_SECRET_NAME: docker

jobs:

    lint-format-plus-static-code-check:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '3.11'

            - name: Cache pip packages
              id: cache-pip
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install pre-commit
              run: pip install pre-commit

            - name: Linting with pre-commit
              run: |
                pre-commit run --all-files

    generate-docker-image-tag:
      needs:
        - lint-format-plus-static-code-check
      if: ${{ startsWith(github.ref, 'refs/tags/')}}
      runs-on: ubuntu-latest
      outputs:
        docker_image_tag: ${{ steps.generate-docker-image-tag.outputs.docker_image_tag }}
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Generate docker image tag
          id: generate-docker-image-tag
          run: |
            docker_image_tag=$(./run.sh create_version_tag)
            echo "docker_image_tag=$docker_image_tag" >> $GITHUB_OUTPUT
            echo "Docker image tag: $docker_image_tag"

    build-docker-image-plus-push-to-registry:
      runs-on: ubuntu-latest
      needs:
        - generate-docker-image-tag
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build and push
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/spark_app:${{needs.generate-docker-image-tag.outputs.docker_image_tag}}
            platforms: linux/amd64

    upload-into-s3:
        runs-on: ubuntu-latest
        needs:
          - build-docker-image-plus-push-to-registry
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '3.11'

            - name: Cache pip packages
              id: cache-pip
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install s3cmd
              run: pip install s3cmd

            - name: Upload s3_script.py into the S3 bucket
              run: |
                s3cmd --access_key=${{ secrets.AWS_ACCESS_KEY_ID }} \
                      --secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                      --host-bucket="%(bucket)s.${{ secrets.S3_HOST }}" \
                      --region=${{ secrets.S3_BUCKET_REGION }} \
                      put s3_script.py s3://${{ secrets.S3_BUCKET }}/stackable-demo/s3_script.py

    udpate-manifest-files-plus-deploy-on-k8s-plus-pull-request:
      runs-on: ubuntu-latest
      needs:
        - generate-docker-image-tag
        - build-docker-image-plus-push-to-registry
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Update docker image tags
          env:
            DOCKER_IMAGE_TAG: ${{ needs.generate-docker-image-tag.outputs.docker_image_tag }}
          run: |
            ./run.sh update_docker_image_tag ${DOCKER_IMAGE_TAG}

        - name: Set up Kubectl
          run: |
            LATEST_KUBECTL_VERSION=$(./run.sh get_latest_kubectl_release)
            curl -LO https://dl.k8s.io/release/$LATEST_KUBECTL_VERSION/bin/linux/amd64/kubectl
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

        - name: Create Kubeconfig
          run: |
            if [ ! -d "$HOME/.kube" ]; then
              mkdir $HOME/.kube
            fi
            echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

        - name: Check if the docker K8s secret exists in the cluster
          id: check-for-docker-secret
          continue-on-error: true
          run: |
            kubectl get secret ${{ env.DOCKER_PULL_SECRET_NAME }}

        - name: Create docker secret on K8s
          if: steps.check-for-docker-secret.outcome == 'failure'
          run: |
            kubectl create secret docker-registry ${{ env.DOCKER_PULL_SECRET_NAME }} \
             --docker-server=https://index.docker.io/v1/ \
             --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
             --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
             --docker-email=${{ secrets.DOCKERHUB_EMAIL }}

        - name: Reconfigure the airflow DAGs on k8s
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            S3_BUCKET: ${{ secrets.S3_BUCKET }}
            S3_HOST: ${{ secrets.S3_HOST}}
            S3_BUCKET_REGION: ${{ secrets.S3_BUCKET_REGION }}
          run: |
            ./run.sh create:airflow_dags

        - name: Create Pull Request
          uses: peter-evans/create-pull-request@v7
          with:
            base: master
            branch: docker/new_image_tag
            delete-branch: false
            token: ${{ secrets.GIT_FG_TOKEN }}
            title: "Update docker image tag to ${{ needs.generate-docker-image-tag.outputs.docker_image_tag}}"
